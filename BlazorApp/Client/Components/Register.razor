@page "/register"
@using BlazorApp.Client.Services
@using BlazorApp.Application.RequestModels
@inject IAuthenticationService AuthService;
@inject NavigationManager NavigationManager

<div class="card">
    <h4 class="card-header">Register</h4>
    <div class="card-body">
        <EditForm Model="@RegisterRequest" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>First Name</label>
                <InputText @bind-Value="RegisterRequest.Login" class="form-control" />
                <ValidationMessage For="@(() => RegisterRequest.Login)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="RegisterRequest.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => RegisterRequest.Password)" />
            </div>
            <button disabled="@_loading" class="btn btn-primary">
                @if (_loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Register
            </button>
            <NavLink href="login" class="btn btn-link">Cancel</NavLink>
        </EditForm>
    </div>
</div>

@code {
    protected RegisterRequest RegisterRequest = new();
    private bool _loading;

    private async void OnValidSubmit()
    {
        _loading = true;
        try
        {
            await AuthService.Register(RegisterRequest);
            //TODO посмотреть как тут сделано
            //AlertService.Success("Registration successful", keepAfterRouteChange: true);

            NavigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            _loading = false;
            StateHasChanged();
        }
    }
}